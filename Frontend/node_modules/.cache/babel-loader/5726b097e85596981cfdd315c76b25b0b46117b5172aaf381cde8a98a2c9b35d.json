{"ast":null,"code":"// import React, { createContext, useState } from 'react';\n// // Create Cart Context\n// export const CartContext = createContext();\n// // Cart Provider component\n// const CartProvider = ({ children }) => {\n//   const [cart, setCart] = useState([]);\n//   // Add item to the cart\n//   const addToCart = (product) => {\n//     setCart((prevCart) => {\n//       const existingProduct = prevCart.find(item => item.id === product.id);\n//       if (existingProduct) {\n//         return prevCart.map(item => \n//           item.id === product.id ? { ...item, quantity: item.quantity + 1 } : item\n//         );\n//       } else {\n//         return [...prevCart, { ...product, quantity: 1 }];\n//       }\n//     });\n//   };\n//   // Remove item from the cart\n//   const removeFromCart = (product) => {\n//     setCart((prevCart) => prevCart.filter(item => item.id !== product.id));\n//   };\n//   // Update quantity of an item in the cart\n//   const updateQuantity = (product, newQuantity) => {\n//     setCart((prevCart) => {\n//       if (newQuantity <= 0) {\n//         return prevCart.filter(item => item.id !== product.id); // Remove item if quantity is 0 or negative\n//       }\n//       return prevCart.map(item =>\n//         item.id === product.id ? { ...item, quantity: newQuantity } : item\n//       );\n//     });\n//   };\n//   // Clear the cart\n//   const clearCart = () => {\n//     setCart([]);\n//   };\n//   return (\n//     <CartContext.Provider value={{ cart, addToCart, removeFromCart, updateQuantity, clearCart }}>\n//       {children}\n//     </CartContext.Provider>\n//   );\n// };\n// export default CartProvider;\nimport React,{createContext,useState}from'react';// Create Cart Context\nimport{jsx as _jsx}from\"react/jsx-runtime\";export const CartContext=/*#__PURE__*/createContext();// Cart Provider component\nconst CartProvider=_ref=>{let{children}=_ref;const[cart,setCart]=useState([]);// Add item to the cart\nconst addToCart=product=>{setCart(prevCart=>{const existingProduct=prevCart.find(item=>item.id===product.id);if(existingProduct){return prevCart.map(item=>item.id===product.id?{...item,quantity:item.quantity+1}:item);}else{return[...prevCart,{...product,quantity:1,size:''}];// Default size is empty\n}});};// Remove item from the cart\nconst removeFromCart=product=>{setCart(prevCart=>prevCart.filter(item=>item.id!==product.id));};// Update quantity of an item in the cart\nconst updateQuantity=(product,newQuantity)=>{setCart(prevCart=>{if(newQuantity<=0){return prevCart.filter(item=>item.id!==product.id);// Remove item if quantity is 0 or negative\n}return prevCart.map(item=>item.id===product.id?{...item,quantity:newQuantity}:item);});};// Update size of an item in the cart\nconst updateSize=(product,newSize)=>{setCart(prevCart=>prevCart.map(item=>item.id===product.id?{...item,size:newSize}:item));};// Clear the cart\nconst clearCart=()=>{setCart([]);};return/*#__PURE__*/_jsx(CartContext.Provider,{value:{cart,addToCart,removeFromCart,updateQuantity,updateSize,// Added to context\nclearCart},children:children});};export default CartProvider;","map":{"version":3,"names":["React","createContext","useState","jsx","_jsx","CartContext","CartProvider","_ref","children","cart","setCart","addToCart","product","prevCart","existingProduct","find","item","id","map","quantity","size","removeFromCart","filter","updateQuantity","newQuantity","updateSize","newSize","clearCart","Provider","value"],"sources":["C:/Users/lenovo/OneDrive/Desktop/Ecommerce/React-Project-main/Frontend/src/components/Cart/CartContext.jsx"],"sourcesContent":["// import React, { createContext, useState } from 'react';\n\n// // Create Cart Context\n// export const CartContext = createContext();\n\n// // Cart Provider component\n// const CartProvider = ({ children }) => {\n//   const [cart, setCart] = useState([]);\n\n//   // Add item to the cart\n//   const addToCart = (product) => {\n//     setCart((prevCart) => {\n//       const existingProduct = prevCart.find(item => item.id === product.id);\n//       if (existingProduct) {\n//         return prevCart.map(item => \n//           item.id === product.id ? { ...item, quantity: item.quantity + 1 } : item\n//         );\n//       } else {\n//         return [...prevCart, { ...product, quantity: 1 }];\n//       }\n//     });\n//   };\n\n//   // Remove item from the cart\n//   const removeFromCart = (product) => {\n//     setCart((prevCart) => prevCart.filter(item => item.id !== product.id));\n//   };\n\n//   // Update quantity of an item in the cart\n//   const updateQuantity = (product, newQuantity) => {\n//     setCart((prevCart) => {\n//       if (newQuantity <= 0) {\n//         return prevCart.filter(item => item.id !== product.id); // Remove item if quantity is 0 or negative\n//       }\n//       return prevCart.map(item =>\n//         item.id === product.id ? { ...item, quantity: newQuantity } : item\n//       );\n//     });\n//   };\n\n//   // Clear the cart\n//   const clearCart = () => {\n//     setCart([]);\n//   };\n\n//   return (\n//     <CartContext.Provider value={{ cart, addToCart, removeFromCart, updateQuantity, clearCart }}>\n//       {children}\n//     </CartContext.Provider>\n//   );\n// };\n\n// export default CartProvider;\n\nimport React, { createContext, useState } from 'react';\n\n// Create Cart Context\nexport const CartContext = createContext();\n\n// Cart Provider component\nconst CartProvider = ({ children }) => {\n  const [cart, setCart] = useState([]);\n\n  // Add item to the cart\n  const addToCart = (product) => {\n    setCart((prevCart) => {\n      const existingProduct = prevCart.find(item => item.id === product.id);\n      if (existingProduct) {\n        return prevCart.map(item =>\n          item.id === product.id ? { ...item, quantity: item.quantity + 1 } : item\n        );\n      } else {\n        return [...prevCart, { ...product, quantity: 1, size: '' }]; // Default size is empty\n      }\n    });\n  };\n\n  // Remove item from the cart\n  const removeFromCart = (product) => {\n    setCart((prevCart) => prevCart.filter(item => item.id !== product.id));\n  };\n\n  // Update quantity of an item in the cart\n  const updateQuantity = (product, newQuantity) => {\n    setCart((prevCart) => {\n      if (newQuantity <= 0) {\n        return prevCart.filter(item => item.id !== product.id); // Remove item if quantity is 0 or negative\n      }\n      return prevCart.map(item =>\n        item.id === product.id ? { ...item, quantity: newQuantity } : item\n      );\n    });\n  };\n\n  // Update size of an item in the cart\n  const updateSize = (product, newSize) => {\n    setCart((prevCart) =>\n      prevCart.map(item =>\n        item.id === product.id ? { ...item, size: newSize } : item\n      )\n    );\n  };\n\n  // Clear the cart\n  const clearCart = () => {\n    setCart([]);\n  };\n\n  return (\n    <CartContext.Provider\n      value={{\n        cart,\n        addToCart,\n        removeFromCart,\n        updateQuantity,\n        updateSize, // Added to context\n        clearCart,\n      }}\n    >\n      {children}\n    </CartContext.Provider>\n  );\n};\n\nexport default CartProvider;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}